*nvim-genghis.txt*           For Neovim          Last change: 2024 December 13

==============================================================================
Table of Contents                             *nvim-genghis-table-of-contents*

1. nvim-genghis                                   |nvim-genghis-nvim-genghis-|
  - Table of contents           |nvim-genghis-nvim-genghis--table-of-contents|
  - Features                             |nvim-genghis-nvim-genghis--features|
  - Installation                     |nvim-genghis-nvim-genghis--installation|
  - Configuration                   |nvim-genghis-nvim-genghis--configuration|
  - Usage                                   |nvim-genghis-nvim-genghis--usage|
  - Available commands         |nvim-genghis-nvim-genghis--available-commands|
  - Why that name?                 |nvim-genghis-nvim-genghis--why-that-name?|
  - About the author             |nvim-genghis-nvim-genghis--about-the-author|

==============================================================================
1. nvim-genghis                                   *nvim-genghis-nvim-genghis-*



Lightweightand quick file operations without being a full-blown file manager.
For when you prefer a fuzzy finder over a file tree, but still want some
convenient file operations inside nvim.




TABLE OF CONTENTS               *nvim-genghis-nvim-genghis--table-of-contents*

- |nvim-genghis-features|
- |nvim-genghis-installation|
- |nvim-genghis-configuration|
- |nvim-genghis-usage|
- |nvim-genghis-available-commands|
    - |nvim-genghis-file-operations|
    - |nvim-genghis-copy-operations|
    - |nvim-genghis-other-operations|
- |nvim-genghis-why-that-name?|
- |nvim-genghis-about-the-author|


FEATURES                                 *nvim-genghis-nvim-genghis--features*

- Perform **common file operations**moving, renaming, creating, deleting, or
    duplicating files.
- **Copy** the path or name of the current file in various formats.
- All movement and renaming commands **update import statements** to the
    renamed file (if the LSP supports `workspace/willRenameFiles`).
- **Quality of life**automatically keep the extension when no extension is
    given, use vim motions in the input field, confirmatory notifications, and
    more.
- **Lightweight**no file management UI or file tree.


INSTALLATION                         *nvim-genghis-nvim-genghis--installation*

**Requirements** - nvim 0.10 or higher - _for nice input UI_a `vim.ui.input`
provider such as dressing.nvim <http://github.com/stevearc/dressing.nvim> or
snacks.nvim <http://github.com/folke/snacks.nvim> - _for the trash command_an
OS-specific trash CLI like `gio trash` or `trash`.

>lua
    -- lazy.nvim
    { 
        "chrisgrieser/nvim-genghis",
        cmd = "Genghis",
        opts = {}, -- empty table needed even for default config
    },
    
    -- packer
    use { 
        "chrisgrieser/nvim-genghis", 
    }
<


CONFIGURATION                       *nvim-genghis-nvim-genghis--configuration*

The `setup` call is required for `lazy.nvim`, but otherwise optional.

>lua
    -- default config
    require("genghis").setup {
        -- default is `"trash"` on Mac/Windows, and `{ "gio", "trash" }` on Linux
        trashCmd = "trash",
    
        -- set to empty string to disable
        -- (some icons are only used for notification plugins like `snacks.nvim`)
        icons = {
            chmodx = "󰒃",
            copyPath = "󰅍",
            duplicate = "",
            file = "󰈔",
            move = "󰪹",
            new = "",
            rename = "󰑕",
            trash = "󰩹",
        }
    }
<


USAGE                                       *nvim-genghis-nvim-genghis--usage*

You can access a command via the lua API:

>lua
    require("genghis").createNewFile()
<

Or you can use the ex command `:Genghis` with the respective sub-command:

>txt
    :Genghis createNewFile
<


AVAILABLE COMMANDS             *nvim-genghis-nvim-genghis--available-commands*


FILE OPERATIONS ~

- `.createNewFile`Create a new file.
- `.duplicateFile`Duplicate the current file.
- `.moveSelectionToNewFile`Prompts for a new file name
    and moves the current selection to that new file. (Note that this is a Visual
    Line mode command, the selection is moved linewise.)
- `.renameFile`Rename the current file.
- `.moveAndRenameFile`Move and Rename the current file. Keeps the
    old name if the new path ends with `/`. Works like the Unix `mv` command.
- `.moveToFolderInCwd`Move the current file to an existing folder in the
    current working directory.

The following applies to all commands above: 1. If no extension has been
provided, uses the extension of the original file. 2. If the new file name
includes a `/`, the new file is placed in the respective subdirectory, creating
any non-existing intermediate folders. 3. All movement and renaming commands
update `import` statements to the renamed file (if the LSP supports
`workspace/willRenameFiles`).


COPY OPERATIONS ~

- `.copyFilename`Copy the file name.
- `.copyFilepath`Copy the absolute file path.
- `.copyFilepathWithTilde`Copy the absolute file path, replacing the home
    directory with `~`.
- `.copyRelativePath`Copy the relative file path.
- `.copyDirectoryPath`Copy the absolute directory path.
- `.copyRelativeDirectoryPath`Copy the relative directory path.
- `.copyFileItself`Copies the file itself. This means you can paste it into
    the browser or file manager. (Currently only on macOS, PRs welcome.)

All commands use the system clipboard.


OTHER OPERATIONS ~

- `.chmodx`Makes current file executable. Equivalent to `chmod   +x`.
- `.trashFile`Move the current file to the trash location. Defaults to `gio   trash` on _Linux_, and `trash` on _macOS_ or _Windows_.
    - If bufdelete.nvim <https://github.com/famiu/bufdelete.nvim> is available,
        `require("bufdelete.nvim").bufwipeout` is used to keep window layout intact
        instead of `vim.cmd.bwipeout`.


  [!NOTE] The trash CLIs are usually not available by default, and must be
  installed.

WHY THAT NAME?                     *nvim-genghis-nvim-genghis--why-that-name?*

A nod to vim.eunuch <https://github.com/tpope/vim-eunuch>, an older vimscript
plugin with a similar goal. As opposed to childless eunuchs, it is said that
Genghis Khan has fathered thousands of children
<https://allthatsinteresting.com/genghis-khan-children>.


ABOUT THE AUTHOR                 *nvim-genghis-nvim-genghis--about-the-author*

In my day job, I am a sociologist studying the social mechanisms underlying the
digital economy. For my PhD project, I investigate the governance of the app
economy and how software ecosystems manage the tension between innovation and
compatibility. If you are interested in this subject, feel free to get in
touch.

I also occasionally blog about vim: Nano Tips for Vim
<https://nanotipsforvim.prose.sh>

- Website <https://chris-grieser.de/>
- Mastodon <https://pkm.social/@pseudometa>
- ResearchGate <https://www.researchgate.net/profile/Christopher-Grieser>
- LinkedIn <https://www.linkedin.com/in/christopher-grieser-ba693b17a/>



Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
